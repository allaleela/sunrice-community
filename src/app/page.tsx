"use client";
import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/navigation";
import styles from "./main8bit.module.css";

const terminalBlocks = [
  ["üåÖ SUNRICE TAXI ‚Äî –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è"],
  [
    '"–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Ç—ë—Ç —Å–∞–º–∞, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å —Å–≤–µ—Ç." (—á—É—Ç—å-—á—É—Ç—å –ª—é–±–≤–∏, –∏ –Ω–µ–º–Ω–æ–≥–æ –±–µ–∑—É–º–∏—è)'
  ],
  [
    '–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –ø–æ –≤—Å–µ–π –ø–ª–∞–Ω–µ—Ç–µ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã 10 000 —Å–≤–µ—Ç–æ–≤—ã—Ö –ø–æ—Å–ª–∞–Ω–∏–π ‚Äî',
    '–º—ã –Ω–∞–∑—ã–≤–∞–µ–º –∏—Ö POSTULATES.',
    '–ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –Ω–µ—Å—ë—Ç –≤ —Å–µ–±–µ –∫—É—Å–æ—á–µ–∫ –∫–æ–¥–∞ ‚Äî –º—É–¥—Ä–æ—Å—Ç–∏, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ ‚Äî –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –Ω–∞—à—ë–ª —Ç–µ–±—è.'
  ],
  [
    '–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ NFT. –≠—Ç–æ –∫–ª—é—á –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é, –≥–¥–µ —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —á–∞—Å—Ç—å—é —Ç–∞–π–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç—Ä—ë—Ö —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ, –Ω–æ –≤–æ–ª—à–µ–±–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.'
  ],
  [
    'üõ†Ô∏è –ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å:',
    '- –ü–æ–ª—É—á–∞–µ—à—å —Å–≤–æ–π POSTULATE (–≤ –≤–∏–¥–µ NFT)',
    '- –ò—â–µ—à—å –µ—â—ë –¥–≤—É—Ö —Ç–∞–∫–∏—Ö, –∫–∞–∫ —Ç—ã ‚Äî —á–µ—Ä–µ–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç, —á–∞—Ç, –º–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–µ—Ä–¥—Ü–µ',
    '- –í–º–µ—Å—Ç–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —Å–≤–µ—Ç–∞ ‚Äî –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∞—Ä—Ç, —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–µ–∫, –∑–∞–±–æ–º–±–∏—Ç—å POSTULATE –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏.',
    '- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ —ç—Ç–æ –≤ SUNRICE COMMUNITY ‚Äî –∏ –≤–∞—à–∞ NFT –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∑–Ω–∞–∫, —á—Ç–æ —Å–≤–µ—Ç –ø—Ä–æ—à—ë–ª'
  ],
  [
    'üöñ –¢–∞–∫—Å–∏ –Ω–µ –ø—Ä–∏–µ–¥–µ—Ç, –ø–æ–∫–∞ –≤—ã –Ω–µ —Å—Ç–∞–Ω–µ—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π. –ù–æ –∫–æ–≥–¥–∞ –æ–Ω–æ –ø—Ä–∏–µ–¥–µ—Ç ‚Äî –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.'
  ],
  [
    '‚ú® –≠—Ç–æ –∏–≥—Ä–∞. –≠—Ç–æ –æ–±—É—á–µ–Ω–∏–µ. –≠—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–∞—è –º–∞–≥–∏—è. –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –¢—ã —Å–≤–µ—Ç–æ–≤–æ–π —É—á–∞—Å—Ç–Ω–∏–∫. –ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.',
    '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–µ—Ç–∏.'
  ],
  [
    '–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ –Ω–µ –≤–∏–¥–µ—Ç—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å.',
    '–°–ª—É—à–∞–π—Ç–µ! –°–≤–µ—Ç –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è!'
  ],
  [
    '–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é? (yes/no)'
  ]
];

const typeSoundUrl = "/typewriter-key.mp3";

export default function Home() {
  const [displayedBlocks, setDisplayedBlocks] = useState<string[][]>([[""]]);
  const [blockIdx, setBlockIdx] = useState(0);
  const [lineIdx, setLineIdx] = useState(0);
  const [charIdx, setCharIdx] = useState(0);
  const [showActions, setShowActions] = useState(false);
  const [noMsg, setNoMsg] = useState("");
  const [soundEnabled, setSoundEnabled] = useState(false);
  const router = useRouter();
  const typing = useRef(true);

  useEffect(() => {
    const enableSound = () => setSoundEnabled(true);
    window.addEventListener("pointerdown", enableSound, { once: true });
    return () => window.removeEventListener("pointerdown", enableSound);
  }, []);

  useEffect(() => {
    if (!typing.current) return;
    if (blockIdx >= terminalBlocks.length) {
      setShowActions(true);
      typing.current = false;
      return;
    }
    const block = terminalBlocks[blockIdx];
    const line = block[lineIdx];
    if (charIdx < line.length) {
      const timeout = setTimeout(() => {
        setDisplayedBlocks((prev) => {
          const updated = prev.map((b) => [...b]);
          updated[blockIdx][lineIdx] = (updated[blockIdx][lineIdx] || "") + line[charIdx];
          return updated;
        });
        setCharIdx((c) => c + 1);
        // Play sound for each char (new Audio instance for each), —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if (soundEnabled && line[charIdx] !== ' ' && line[charIdx] !== '\n') {
          const audio = new Audio(typeSoundUrl);
          audio.volume = 0.5;
          audio.play();
        }
      }, 25);
      return () => clearTimeout(timeout);
    } else if (lineIdx < block.length - 1) {
      setTimeout(() => {
        setDisplayedBlocks((prev) => {
          const updated = prev.map((b) => [...b]);
          updated[blockIdx].push("");
          return updated;
        });
        setLineIdx((l) => l + 1);
        setCharIdx(0);
      }, 120);
    } else {
      setTimeout(() => {
        setDisplayedBlocks((prev) => [...prev, [""]]);
        setBlockIdx((b) => b + 1);
        setLineIdx(0);
        setCharIdx(0);
      }, 350);
    }
  }, [charIdx, lineIdx, blockIdx, soundEnabled]);

  const handleYes = () => {
    router.push("/submit");
  };
  const handleNo = () => {
    setNoMsg("–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ SUNRICE TAXI üöï");
    setShowActions(false);
  };

  return (
    <div className={styles.terminalBg}>
      <div className={styles.terminalBody}>
        {displayedBlocks.map((block, bIdx) => (
          <div key={bIdx}>
            {block.map((line, lIdx) => (
              <div key={lIdx}>
                {line}
                {bIdx === displayedBlocks.length - 1 && lIdx === block.length - 1 && !showActions ? <span className={styles.terminalCursor}></span> : null}
              </div>
            ))}
            {bIdx < displayedBlocks.length - 1 && <hr className={styles.terminalDivider} />}
          </div>
        ))}
        {showActions && (
          <div className={styles.terminalActions}>
            <button className={styles.terminalBtn} onClick={handleYes}>yes</button>
            <button className={styles.terminalBtn} onClick={handleNo}>no</button>
          </div>
        )}
        {noMsg && <div className={styles.terminalMsg}>{noMsg}</div>}
      </div>
    </div>
  );
}
